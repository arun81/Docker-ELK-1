---
version: '3.6'
services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${TAG}
    container_name: elasticsearch
    secrets:
      - source: ca.crt
        target: /usr/share/elasticsearch/config/certs/ca/ca.crt
      - source: elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
      - source: elasticsearch.keystore
        target: /usr/share/elasticsearch/config/elasticsearch.keystore
      - source: elasticsearch.key
        target: /usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.key
      - source: elasticsearch.crt
        target: /usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.crt
    ports: ['9200:9200']
    networks: ['stack']
    volumes:
      - 'elasticsearch_data:/usr/share/elasticsearch/data'
      - './scripts/setup-users.sh:/usr/local/bin/setup-users.sh:ro'
    healthcheck:
      test: curl --cacert /usr/share/elasticsearch/config/certs/ca/ca.crt -s https://localhost:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:${TAG}
    container_name: kibana
    secrets:
      - source: kibana.yml
        target: /usr/share/kibana/config/kibana.yml
      - source: kibana.keystore
        target: /usr/share/kibana/data/kibana.keystore
      - source: ca.crt
        target: /usr/share/kibana/config/certs/ca/ca.crt
      - source: kibana.key
        target: /usr/share/kibana/config/certs/kibana/kibana.key
      - source: kibana.crt
        target: /usr/share/kibana/config/certs/kibana/kibana.crt
    ports: ['5601:5601']
    networks: ['stack']
    depends_on: ['elasticsearch']
    healthcheck:
      test: curl --cacert /usr/share/elasticsearch/config/certs/ca/ca.crt -s https://localhost:5601 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  logstash:
    image: docker.elastic.co/logstash/logstash:${TAG}
    container_name: logstash
    secrets:
      - source: logstash.conf
        target: /usr/share/logstash/pipeline/logstash.conf
      - source: logstash.yml
        target: /usr/share/logstash/config/logstash.yml
      - source: logstash.keystore
        target: /usr/share/logstash/config/logstash.keystore
      - source: ca.crt
        target: /usr/share/logstash/config/certs/ca/ca.crt
    networks: ['stack']
    depends_on: ['elasticsearch']
    healthcheck:
      test: bin/logstash -t
      interval: 60s
      timeout: 50s
      retries: 5

  auditbeat:
    image: docker.elastic.co/beats/auditbeat:${TAG}
    container_name: auditbeat
    command: -e --strict.perms=false # -e sinalizador para logar ao stderr e desabilitar saída de syslog / arquivo
    cap_add: ['AUDIT_CONTROL', 'AUDIT_READ']
    secrets:
      - source: auditbeat.yml
        target: /usr/share/auditbeat/auditbeat.yml
      - source: auditbeat.keystore
        target: /usr/share/auditbeat/auditbeat.keystore
      - source: ca.crt
        target: /usr/share/auditbeat/certs/ca/ca.crt
    # O Auditbeat deve ser executado no espaço de nomes do processo principal.
    pid: host
    volumes:
      - './scripts/setup-beat.sh:/usr/local/bin/setup-beat.sh:ro'
    networks: ['stack']
    depends_on: ['elasticsearch', 'kibana']
    healthcheck:
      test: auditbeat --strict.perms=false test config
      interval: 30s
      timeout: 15s
      retries: 5

  filebeat:
    image: docker.elastic.co/beats/filebeat:${TAG}
    container_name: filebeat
    command: --strict.perms=false -e  # -e sinalizador para logar ao stderr e desabilitar saída de syslog / arquivo
    # Se o sistema host tiver logs em "/var/log", monte-os em "/mnt/log"
    # dentro do container, onde o Filebeat poderá encontrá-los.
    # volumes: ['/var/log: /mnt/log:ro']
    secrets:
      - source: filebeat.yml
        target: /usr/share/filebeat/filebeat.yml
      - source: filebeat.keystore
        target: /usr/share/filebeat/filebeat.keystore
      - source: ca.crt
        target: /usr/share/filebeat/certs/ca/ca.crt
    volumes:
      - './scripts/setup-beat.sh:/usr/local/bin/setup-beat.sh:ro'
    networks: ['stack']
    depends_on: ['elasticsearch', 'kibana']
    healthcheck:
      test: filebeat test config
      interval: 30s
      timeout: 15s
      retries: 5

  heartbeat:
    image: docker.elastic.co/beats/heartbeat:${TAG}
    container_name: heartbeat
    command: --strict.perms=false -e  # -e sinalizador para logar ao stderr e desabilitar saída de syslog / arquivo
    secrets:
      - source: heartbeat.yml
        target: /usr/share/heartbeat/heartbeat.yml
      - source: heartbeat.keystore
        target: /usr/share/heartbeat/heartbeat.keystore
      - source: ca.crt
        target: /usr/share/heartbeat/certs/ca/ca.crt
    volumes:
      - './scripts/setup-beat.sh:/usr/local/bin/setup-beat.sh:ro'
    networks: ['stack']
    depends_on: ['elasticsearch', 'kibana']
    healthcheck:
      test: heartbeat test config
      interval: 30s
      timeout: 15s
      retries: 5

  metricbeat:
    image: docker.elastic.co/beats/metricbeat:${TAG}
    container_name: metricbeat
    # As seções comentadas abaixo permitem que o Metricbeat monitore o host do Docker,
    # em vez do contêiner do Metricbeat. É problemático com o Docker para
    # Windows, no entanto, desde "/proc", "/sys" etc. não existem em Windows.
    # O mesmo se aplica ao OSX (teste de necessidades).
    # volumes:
    #   - /proc:/hostfs/proc:ro
    #   - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
    #   - /:/hostfs:ro
    command: --strict.perms=false -e  # -e sinalizador para logar ao stderr e desabilitar saída de syslog / arquivo
    secrets:
      - source: metricbeat.yml
        target: /usr/share/metricbeat/metricbeat.yml
      - source: metricbeat.keystore
        target: /usr/share/metricbeat/metricbeat.keystore
      - source: ca.crt
        target: /usr/share/metricbeat/certs/ca/ca.crt
    volumes:
      - './scripts/setup-beat.sh:/usr/local/bin/setup-beat.sh:ro'
    networks: ['stack']
    depends_on: ['elasticsearch', 'kibana']
    healthcheck:
      test: metricbeat test config
      interval: 30s
      timeout: 15s
      retries: 5

  packetbeat:
    image: docker.elastic.co/beats/packetbeat:${TAG}
    container_name: packetbeat
    # O Packetbeat precisa de alguns privilégios elevados para capturar o tráfego de rede.
    # Nós os concederemos com recursos POSIX.
    cap_add: ['NET_RAW', 'NET_ADMIN']
    # Use a rede "modo host" para permitir que o Packetbeat capture tráfego de
    # a interface de rede real no host, em vez de ser isolado para o interface virtual do
    # containerer.
    network_mode: host
    # Desde que fizemos isso, o Packetbeat não faz parte da rede Docker "stack"
    # que os outros contêineres estejam conectados e, portanto, não consigam resolver
    # hostname "elasticsearch". Em vez disso, vamos dizer para encontrar o Elasticsearch
    # on "localhost", que é a máquina host do Docker neste contexto.
    command: -e -E 'output.elasticsearch.hosts=["localhost:9200"]'
    depends_on: ['elasticsearch']
    command: --strict.perms=false -e -E output.elasticsearch.hosts="https://localhost:9200" # -e sinalizador para logar ao stderr e desabilitar saída de syslog / arquivo
    secrets:
      - source: packetbeat.yml
        target: /usr/share/packetbeat/packetbeat.yml
      - source: packetbeat.keystore
        target: /usr/share/packetbeat/packetbeat.keystore
      - source: ca.crt
        target: /usr/share/packetbeat/certs/ca/ca.crt
    volumes:
      - './scripts/setup-beat.sh:/usr/local/bin/setup-beat.sh:ro'
    depends_on: ['elasticsearch', 'kibana']
    healthcheck:
      test: packetbeat test config
      interval: 30s
      timeout: 15s
      retries: 5

  apm-server:
    image: docker.elastic.co/apm/apm-server:${TAG}
    container_name: apm_server
    ports: ['8200:8200']
    networks: ['stack']
    command: --strict.perms=false -e  # -e sinalizador para logar ao stderr e desabilitar saída de syslog / arquivo
    secrets:
      - source: apm-server.yml
        target: /usr/share/apm-server/apm-server.yml
      - source: apm-server.keystore
        target: /usr/share/apm-server/apm-server.keystore
      - source: ca.crt
        target: /usr/share/apm-server/certs/ca/ca.crt
    volumes:
      - './scripts/setup-beat.sh:/usr/local/bin/setup-beat.sh:ro'
    depends_on: ['elasticsearch', 'kibana']
    healthcheck:
      test: curl --cacert /usr/share/elasticsearch/config/certs/ca/ca.crt -s https://localhost:8200/healthcheck >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

networks: {stack: {}}

volumes:
  elasticsearch_data:

secrets:
  ca.crt:
    file: ./config/ssl/ca/ca.crt
  logstash.yml:
    file: ./config/logstash/logstash.yml
  logstash.keystore:
    file: ./config/logstash/logstash.keystore
  logstash.conf:
    file: ./config/logstash/pipeline/logstash.conf
  elasticsearch.yml:
    file: ./config/elasticsearch/elasticsearch.yml
  elasticsearch.keystore:
    file: ./config/elasticsearch/elasticsearch.keystore
  elasticsearch.key:
    file: ./config/elasticsearch/elasticsearch.key
  elasticsearch.crt:
    file: ./config/elasticsearch/elasticsearch.crt
  elasticsearch.p12:
    file: ./config/elasticsearch/elasticsearch.p12
  kibana.yml:
    file: ./config/kibana/kibana.yml
  kibana.keystore:
    file: ./config/kibana/kibana.keystore
  kibana.key:
    file: ./config/kibana/kibana.key
  kibana.crt:
    file: ./config/kibana/kibana.crt
  auditbeat.yml:
    file: ./config/auditbeat/auditbeat.yml
  auditbeat.keystore:
    file: ./config/auditbeat/auditbeat.keystore
  filebeat.yml:
    file: ./config/filebeat/filebeat.yml
  filebeat.keystore:
    file: ./config/filebeat/filebeat.keystore
  heartbeat.yml:
    file: ./config/heartbeat/heartbeat.yml
  heartbeat.keystore:
    file: ./config/heartbeat/heartbeat.keystore
  metricbeat.yml:
    file: ./config/metricbeat/metricbeat.yml
  metricbeat.keystore:
    file: ./config/metricbeat/metricbeat.keystore
  packetbeat.yml:
    file: ./config/packetbeat/packetbeat.yml
  packetbeat.keystore:
    file: ./config/packetbeat/packetbeat.keystore
  apm-server.yml:
    file: ./config/apm-server/apm-server.yml
  apm-server.keystore:
    file: ./config/apm-server/apm-server.keystore
